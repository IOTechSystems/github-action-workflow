###########################################################
# Copyright (C) 2022 IOTech Ltd
###########################################################

name: golangci-lint

on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY:
        description: The working directory, default is project root.
        required: false
        type: string
        default: "."
      GO_LINT_CONFIG_PATH:
        # https://golangci-lint.run/usage/configuration#config-file
        description: The GolangCI-Lint config path which is relative to WORKING_DIRECTORY, default is no config.
        required: false
        type: string
      REQUIRED_PACKAGES:
        description: The required packages are installed by apt, seperate the packages with spaces.
        required: false
        type: string
      USE_PRIVATE_MODULE:
        description: If true, set up the environment for the private go modules, and retrieve the modules versions from scripts/Jenkinsfile.
        required: false
        type: boolean
        default: false  
      GQL_DIRECTORY:
        description: The directory which defines the GraphQL schema and gqlgen generated files, default is an empty string.
        required: false
        type: string

permissions:
  contents: read
 
jobs:
  golangci:
    if: ${{ github.actor != 'dependabot[bot]' }}
    name: lint
    runs-on: ubuntu-latest
    env:
      GOLANGCI_LINT_VERSION: v1.55.2
      GOLANGCI_LINT_FLAGS: --print-issued-lines --max-same-issues 50 --build-tags dev
      GOPRIVATE: github.com/IOTechSystems
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      # Install Golang
      - uses: actions/setup-go@v5
        with:
          # Retrieve go version from go.mod
          go-version-file: "${{ inputs.WORKING_DIRECTORY }}/go.mod"  
          cache-dependency-path: "${{ inputs.WORKING_DIRECTORY }}/go.sum"
      - name: Install required packages
        if: ${{ inputs.REQUIRED_PACKAGES != '' }}
        run: |
          sudo apt update && sudo apt install ${{ inputs.REQUIRED_PACKAGES }}
      # Set up environment for private modules
      - name: Set up for private modules
        if: ${{ inputs.USE_PRIVATE_MODULE }}
        run: |
          echo "license-version=$(grep -E '(licenseValidatorGoVersion|LICENSE_VALIDATOR_GO_VERSION):' scripts/Jenkinsfile | cut -d '"' -f 2)" >> $GITHUB_ENV
          echo "device-sdk=$(grep -E 'deviceSdkGoVersion:' scripts/Jenkinsfile | cut -d '"' -f 2)" >> $GITHUB_ENV
          git config --global --add url.https://${{ secrets.JENKINS_PAT }}@${{ env.GOPRIVATE }}.insteadOf https://${{ env.GOPRIVATE }}  
      # Use private license-validator-go module
      - name: Replace license-validator-go module
        # variable from the previous step
        if: ${{ env.license-version }}
        run: sed -i "s#\(license.*\)\(=> \).*#\1\2${{ env.GOPRIVATE }}/\1 ${{ env.license-version }}#" ${{ inputs.WORKING_DIRECTORY }}/go.mod
      # Use private device-sdk-go-private module
      - name: Replace device-sdk-go-private module
        # variable from the previous step
        if: ${{ env.device-sdk }}
        run: sed -i "s#\(device-sdk.*\)\(=> \).*#\1\2${{ env.GOPRIVATE }}/\1 ${{ env.device-sdk }}#" ${{ inputs.WORKING_DIRECTORY }}/go.mod
      # Load packages
      - name: Run go mod tidy
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          grep replace go.mod || true
          go mod tidy
      # Check if graphql directory exists
      - name: Check graphql dir existence
        id: check_graph_dir
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        if: ${{ inputs.GQL_DIRECTORY != '' }}
        run: |
          [ -d ${{ inputs.GQL_DIRECTORY }} ] && echo "dir_exists=true" >> "$GITHUB_OUTPUT"
      # Run gqlgen to generate the generated.go file if check_graph_dir step is true
      - name: Run gqlgen
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        if: steps.check_graph_dir.outputs.dir_exists == 'true'
        run: make gqlgen
      # Run Go linters       
      - name: golangci-lint
        uses: golangci/golangci-lint-action@c67416616c29c3c48d26b59c45cadb56966d80aa
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: ${{ env.GOLANGCI_LINT_VERSION }}

          # Optional: working directory, useful for monorepos
          working-directory: ${{ inputs.WORKING_DIRECTORY }}

          # Optional: golangci-lint command line arguments.
          args: "${{ env.GOLANGCI_LINT_FLAGS }} ${{ inputs.GO_LINT_CONFIG_PATH != '' && format('--config {0}', inputs.GO_LINT_CONFIG_PATH) || '--no-config' }}"
          skip-cache: true

